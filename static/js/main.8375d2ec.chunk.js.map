{"version":3,"sources":["utils/fetchClient.ts","components/React/Filter.tsx","api/todos.ts","App.tsx","api/users.ts","components/Auth/AuthForm.tsx","components/Auth/AuthContext.tsx","components/React/NewTodo.tsx","components/React/TodoInfo.tsx","components/React/TodoList.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","Filters","client","patchTodos","todoId","Errors","Filter","filter","todos","onCompletedClear","onFilterChange","compareFilter","filterName","classNames","selected","activeTodos","todo","completed","length","isCompletedTodo","some","className","data-cy","href","All","onClick","Active","Completed","type","style","visibility","getUserByEmail","email","a","users","createUser","name","AuthForm","onLogin","useState","setEmail","setName","needToRegister","setNeedToRegister","loading","setLoading","errorMessage","setErrorMessage","saveUser","user","localStorage","setItem","useEffect","userData","getItem","parse","error","loadUser","handleSubmit","event","preventDefault","onSubmit","htmlFor","id","placeholder","disabled","value","required","onChange","e","target","minLength","AuthContext","React","createContext","AuthProvider","children","setUser","Provider","NewTodo","input","isAdding","todoOnload","onInputChange","newTodoField","useRef","current","focus","ref","TodoInfo","todoIdsOnLoad","onTodoDelete","onTodoComplete","saveInputChange","title","inputMode","setInputMode","titleRecord","setTitleRecord","updateInputInfo","autoFocus","currentTarget","onBlur","onKeyDown","key","onDoubleClick","includes","TodoList","todoOnLoad","TransitionGroup","map","CSSTransition","timeout","App","useContext","setTodos","setFilter","setError","setInput","setIsAdding","setTodoOnLoad","setTodoIdsOnLoad","isActiveToggle","setIsActiveToggle","putTodoOnLoad","putAllTodosOnLoad","selectedTodos","selectedTodoIds","userId","todosFromServer","catch","Server","finally","deleteData","Delete","patch","toggleMode","prevTodos","Update","prevTodoIds","handleCompletedCheckBox","handleFormSubmit","Add","newTodoTemplate","newTodo","Post","allCompleted","every","active","forEach","filterType","completedTodos","hidden","Root","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.8375d2ec.chunk.js","sourcesContent":["import { Todo, TodoUpdateData } from '../types/Todo';\nimport { UserData } from '../types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: Todo | UserData | TodoUpdateData | null = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: Todo | UserData) => (\n    request<T>(url, 'POST', data)\n  ),\n  patch: <T>(url: string, data: TodoUpdateData) => (\n    request<T>(url, 'PATCH', data)\n  ),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  filter: string,\n  todos: Todo[],\n  onCompletedClear: () => void,\n  onFilterChange: (filterType: Filters) => void,\n};\n\nexport enum Filters {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport const Filter: React.FC<Props> = ({\n  filter,\n  todos,\n  onCompletedClear,\n  onFilterChange,\n}) => {\n  const compareFilter = (filterName: string) => {\n    return classNames(\n      'filter__link',\n      {\n        selected: filter === filterName,\n      },\n    );\n  };\n\n  const activeTodos = todos.filter(todo => !todo.completed).length;\n  const isCompletedTodo = todos.some(todo => todo.completed);\n\n  return (\n    <footer className=\"todoapp__footer\" data-cy=\"Footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {`${activeTodos} items left`}\n      </span>\n\n      <nav className=\"filter\" data-cy=\"Filter\">\n        <a\n          data-cy=\"FilterLinkAll\"\n          href=\"#/\"\n          className={compareFilter(Filters.All)}\n          onClick={() => onFilterChange(Filters.All)}\n        >\n          All\n        </a>\n\n        <a\n          data-cy=\"FilterLinkActive\"\n          href=\"#/active\"\n          className={compareFilter(Filters.Active)}\n          onClick={() => onFilterChange(Filters.Active)}\n        >\n          Active\n        </a>\n        <a\n          data-cy=\"FilterLinkCompleted\"\n          href=\"#/completed\"\n          className={compareFilter(Filters.Completed)}\n          onClick={() => onFilterChange(Filters.Completed)}\n        >\n          Completed\n        </a>\n      </nav>\n\n      <button\n        data-cy=\"ClearCompletedButton\"\n        type=\"button\"\n        className=\"todoapp__clear-completed\"\n        onClick={() => onCompletedClear()}\n        style={!isCompletedTodo ? { visibility: 'hidden' } : {}}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","import { Todo, TodoUpdateData } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const postTodos = (data: Todo) => {\n  return client.post<Todo>('/todos', data);\n};\n\nexport const deleteTodos = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const patchTodos = (\n  todoId: number, data: TodoUpdateData,\n) => {\n  return client.patch<Todo>(`/todos/${todoId}`, data);\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport classNames from 'classnames';\n\nimport React, {\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\n\nimport {\n  getTodos,\n  postTodos,\n  deleteTodos,\n  patchTodos,\n} from './api/todos';\n\nimport { Filter, Filters } from './components/React/Filter';\nimport { AuthContext } from './components/Auth/AuthContext';\nimport { NewTodo } from './components/React/NewTodo';\nimport { TodoList } from './components/React/TodoList';\nimport { Todo, TodoUpdateData } from './types/Todo';\n\nenum Errors {\n  Server = 'Unable to load data from the Server',\n  Post = 'Unable to add the Todo',\n  Add = 'Title can\\'t be empty',\n  Delete = 'Unable to delete a todo',\n  Update = 'Unable to update a todo',\n}\n\nexport const App: React.FC = () => {\n  const user = useContext(AuthContext);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filter, setFilter] = useState<Filters>(Filters.All);\n  const [error, setError] = useState('');\n  const [input, setInput] = useState('');\n  const [isAdding, setIsAdding] = useState(false);\n  const [todoOnload, setTodoOnLoad] = useState<Todo | null>(null);\n  const [todoIdsOnLoad, setTodoIdsOnLoad] = useState<number[]>([]);\n  const [isActiveToggle, setIsActiveToggle] = useState(false);\n\n  const putTodoOnLoad = (todoId: number) => {\n    setTodoIdsOnLoad([...todoIdsOnLoad, todoId]);\n  };\n\n  const putAllTodosOnLoad = (selectedTodos: Todo[]) => {\n    const selectedTodoIds = selectedTodos.map(todo => todo.id);\n\n    setTodoIdsOnLoad(selectedTodoIds);\n  };\n\n  const fetch = () => {\n    if (user) {\n      getTodos(user.id)\n        .then(todosFromServer => setTodos(todosFromServer))\n        .catch(() => setError(Errors.Server))\n        .finally(() => setTodoIdsOnLoad([]));\n    }\n  };\n\n  const deleteData = (id: number) => {\n    deleteTodos(id)\n      .then(() => fetch())\n      .catch(() => setError(Errors.Delete));\n  };\n\n  const patch = async (\n    id: number,\n    data: TodoUpdateData,\n    toggleMode = false,\n  ) => {\n    putTodoOnLoad(id);\n\n    try {\n      await patchTodos(id, data);\n\n      setTodos((prevTodos) => {\n        return (\n          prevTodos.map(todo => {\n            if (toggleMode) {\n              return { ...todo, ...data };\n            }\n\n            if (todo.id === id) {\n              return { ...todo, ...data };\n            }\n\n            return todo;\n          })\n        );\n      });\n    } catch {\n      setError(Errors.Update);\n    } finally {\n      setTodoIdsOnLoad((prevTodoIds) => (\n        prevTodoIds.filter(todoId => todoId !== id)\n      ));\n    }\n  };\n\n  const handleCompletedCheckBox = async (todo: Todo) => {\n    patch(todo.id, { completed: !todo.completed });\n  };\n\n  const handleTodoDeleteButton = (id: number) => {\n    deleteData(id);\n    putTodoOnLoad(id);\n  };\n\n  const handleClearButton = () => {\n    const completedTodos = todos.filter(todo => todo.completed);\n\n    putAllTodosOnLoad(completedTodos);\n\n    completedTodos.map(todo => deleteData(todo.id));\n  };\n\n  const handleToggleAll = () => {\n    setIsActiveToggle(!isActiveToggle);\n\n    todos.forEach(todo => patch(todo.id, { completed: !isActiveToggle }, true));\n\n    putAllTodosOnLoad(todos);\n  };\n\n  const handleErrorCloser = () => setError('');\n\n  const handleFormSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!input) {\n      setError(Errors.Add);\n      setTimeout(() => setError(''), 3000);\n\n      return;\n    }\n\n    if (user) {\n      const newTodoTemplate: Todo = {\n        id: 0,\n        userId: user.id,\n        title: input,\n        completed: false,\n      };\n\n      setIsAdding(true);\n\n      try {\n        setTodoOnLoad(newTodoTemplate);\n\n        const newTodo = await postTodos(newTodoTemplate);\n\n        setTodos([...todos, newTodo]);\n      } catch {\n        setError(Errors.Post);\n      } finally {\n        setInput('');\n        setIsAdding(false);\n        setTodoOnLoad(null);\n      }\n    }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(event.currentTarget.value);\n    setError('');\n  };\n\n  const handleExtraInputChange = (id: number, title: string) => {\n    if (!title) {\n      putTodoOnLoad(id);\n      deleteData(id);\n\n      return;\n    }\n\n    patch(id, { title });\n  };\n\n  const handleTodosFilter = (filterType: Filters) => setFilter(filterType);\n\n  useEffect(() => fetch(), []);\n\n  useEffect(() => {\n    const allCompleted = todos.every(todo => (todo.completed));\n\n    if (allCompleted) {\n      setIsActiveToggle(true);\n    } else {\n      setIsActiveToggle(false);\n    }\n  }, [todos]);\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <header className=\"todoapp__header\">\n          {!!todos.length && (\n            <button\n              data-cy=\"ToggleAllButton\"\n              type=\"button\"\n              className={classNames(\n                'todoapp__toggle-all', { active: isActiveToggle },\n              )}\n              onClick={() => handleToggleAll()}\n            />\n          )}\n\n          <NewTodo\n            input={input}\n            isAdding={isAdding}\n            todoOnload={todoOnload}\n            onInputChange={handleInputChange}\n            onSubmit={handleFormSubmit}\n          />\n        </header>\n\n        {!!todos.length && (\n          <>\n            <TodoList\n              todos={todos}\n              filter={filter}\n              todoOnLoad={todoOnload}\n              todoIdsOnLoad={todoIdsOnLoad}\n              onTodoDelete={handleTodoDeleteButton}\n              onTodoComplete={handleCompletedCheckBox}\n              saveInputChange={handleExtraInputChange}\n            />\n\n            <Filter\n              filter={filter}\n              todos={todos}\n              onFilterChange={handleTodosFilter}\n              onCompletedClear={handleClearButton}\n            />\n          </>\n        )}\n      </div>\n\n      <div\n        data-cy=\"ErrorNotification\"\n        className={classNames(\n          'notification is-danger is-light has-text-weight-normal',\n          {\n            hidden: !error,\n          },\n        )}\n      >\n        <button\n          data-cy=\"HideErrorButton\"\n          type=\"button\"\n          className=\"delete\"\n          onClick={handleErrorCloser}\n        />\n        {error}\n      </div>\n    </div>\n  );\n};\n","import { User, UserData } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserByEmail = async (email: string) => {\n  const users = await client.get<User[]>(`/users?email=${email}`);\n\n  return users[0] || null;\n};\n\nexport const createUser = async ({ email, name }: UserData) => {\n  return client.post<User>('/users', { email, name });\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { createUser, getUserByEmail } from '../../api/users';\nimport { User } from '../../types/User';\n\nexport type Props = {\n  onLogin: (user: User) => void,\n};\n\nexport const AuthForm: React.FC<Props> = ({ onLogin }) => {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [needToRegister, setNeedToRegister] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const saveUser = (user: User) => {\n    localStorage.setItem('user', JSON.stringify(user));\n    onLogin(user);\n  };\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user');\n\n    if (!userData) {\n      return;\n    }\n\n    try {\n      const user = JSON.parse(userData) as User;\n\n      onLogin(user);\n    } catch (error) {\n      setErrorMessage('Failed to log in, Please, try again');\n    }\n  }, []);\n\n  const loadUser = async () => {\n    const user = await getUserByEmail(email);\n\n    if (user) {\n      saveUser(user);\n    } else {\n      setNeedToRegister(true);\n    }\n  };\n\n  const registerUser = () => {\n    return createUser({ name, email })\n      .then(saveUser);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrorMessage('');\n    setLoading(true);\n\n    try {\n      if (needToRegister) {\n        await registerUser();\n      } else {\n        await loadUser();\n      }\n    } catch (error) {\n      setErrorMessage('Something went wrong');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"box mt-5\">\n      <h1 className=\"title is-3\">\n        {needToRegister ? 'You need to register' : 'Log in to open todos'}\n      </h1>\n\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"user-email\">\n          Email\n        </label>\n\n        <div\n          className={classNames('control has-icons-left', {\n            'is-loading': loading,\n          })}\n        >\n          <input\n            type=\"email\"\n            id=\"user-email\"\n            className={classNames('input', {\n              'is-danger': !needToRegister && errorMessage,\n            })}\n            placeholder=\"Enter your email\"\n            disabled={loading || needToRegister}\n            value={email}\n            required\n            onChange={e => setEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n        </div>\n\n        {!needToRegister && errorMessage && (\n          <p className=\"help is-danger\">{errorMessage}</p>\n        )}\n      </div>\n\n      {needToRegister && (\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"user-name\">\n            Your Name\n          </label>\n\n          <div\n            className={classNames('control has-icons-left', {\n              'is-loading': loading,\n            })}\n          >\n            <input\n              type=\"text\"\n              id=\"user-name\"\n              className={classNames('input', {\n                'is-danger': needToRegister && errorMessage,\n              })}\n              placeholder=\"Enter your name\"\n              required\n              minLength={4}\n              disabled={loading}\n              value={name}\n              onChange={e => setName(e.target.value)}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-user\" />\n            </span>\n          </div>\n\n          {needToRegister && errorMessage && (\n            <p className=\"help is-danger\">{errorMessage}</p>\n          )}\n        </div>\n      )}\n\n      <div className=\"field\">\n        <button\n          type=\"submit\"\n          className={classNames('button is-primary', {\n            'is-loading': loading,\n          })}\n        >\n          {needToRegister ? 'Register' : 'Login'}\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../../types/User';\nimport { AuthForm } from './AuthForm';\n\nexport const AuthContext = React.createContext<User | null>(null);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const AuthProvider: React.FC<Props> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  if (!user) {\n    return <AuthForm onLogin={setUser} />;\n  }\n\n  return (\n    <AuthContext.Provider value={user}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import { useEffect, useRef } from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  input: string,\n  isAdding: boolean,\n  todoOnload: Todo | null,\n  onInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  onSubmit: (event: React.FormEvent) => void,\n};\n\nexport const NewTodo: React.FC<Props> = ({\n  input,\n  isAdding,\n  todoOnload,\n  onInputChange,\n  onSubmit,\n}) => {\n  const newTodoField = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, [todoOnload]);\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        data-cy=\"NewTodoField\"\n        type=\"text\"\n        ref={newTodoField}\n        className=\"todoapp__new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={onInputChange}\n        value={input}\n        disabled={isAdding}\n      />\n    </form>\n  );\n};\n","import classNames from 'classnames';\nimport { useState } from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  todoIdsOnLoad: number[],\n  onTodoDelete: (id: number) => void,\n  onTodoComplete: (todo: Todo) => void,\n  saveInputChange: (id: number, title: string) => void\n\n};\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo,\n  todoIdsOnLoad,\n  onTodoDelete,\n  onTodoComplete,\n  saveInputChange,\n}) => {\n  const { completed, title, id } = todo;\n  const [inputMode, setInputMode] = useState(false);\n  const [titleRecord, setTitleRecord] = useState(title);\n\n  const handleInputModification = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setTitleRecord(event.currentTarget.value);\n  };\n\n  const updateInputInfo = () => {\n    if (titleRecord === title) {\n      setInputMode(false);\n\n      return;\n    }\n\n    saveInputChange(id, titleRecord);\n    setInputMode(false);\n  };\n\n  const handleButtonPressing = (\n    event: React.KeyboardEvent<HTMLInputElement>,\n  ) => {\n    if (event.key === 'Escape') {\n      setInputMode(false);\n\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      updateInputInfo();\n    }\n  };\n\n  const handleButtonBlur = () => {\n    updateInputInfo();\n  };\n\n  return (\n    <div\n      data-cy=\"Todo\"\n      className={classNames('todo', { completed })}\n    >\n      <label className=\"todo__status-label\">\n        <input\n          data-cy=\"TodoStatus\"\n          type=\"checkbox\"\n          className=\"todo__status\"\n          onChange={() => onTodoComplete(todo)}\n        />\n      </label>\n\n      {!inputMode ? (\n        <>\n          <span\n            data-cy=\"TodoTitle\"\n            className=\"todo__title\"\n            onDoubleClick={() => setInputMode(true)}\n          >\n            {title}\n          </span>\n\n          <button\n            type=\"button\"\n            className=\"todo__remove\"\n            data-cy=\"TodoDeleteButton\"\n            onClick={() => onTodoDelete(id)}\n          >\n            ×\n          </button>\n        </>\n      ) : (\n        <input\n          // eslint-disable-next-line jsx-a11y/no-autofocus\n          autoFocus\n          type=\"text\"\n          className=\"todo__title-field\"\n          value={titleRecord}\n          onChange={handleInputModification}\n          onBlur={handleButtonBlur}\n          onKeyDown={handleButtonPressing}\n        />\n      )}\n\n      <div\n        data-cy=\"TodoLoader\"\n        className={classNames(\n          'modal overlay',\n          {\n            'is-active': todoIdsOnLoad.includes(id) || todo.id === 0,\n          },\n        )}\n      >\n        <div className=\"modal-background has-background-white-ter\" />\n        <div className=\"loader\" />\n      </div>\n    </div>\n  );\n};\n","import { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from './TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n  filter: string,\n  todoOnLoad: Todo | null,\n  todoIdsOnLoad: number[],\n  onTodoDelete: (id: number) => void,\n  onTodoComplete: (todo: Todo) => void,\n  saveInputChange: (id: number, title: string) => void\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  filter,\n  todoOnLoad,\n  todoIdsOnLoad,\n  onTodoDelete,\n  onTodoComplete,\n  saveInputChange,\n}) => {\n  return (\n    <section className=\"todoapp__main\" data-cy=\"TodoList\">\n      <TransitionGroup>\n        {todos\n          .filter(todo => {\n            switch (filter) {\n              case 'active':\n                return !todo.completed;\n\n              case 'completed':\n                return todo.completed;\n\n              default: return todo;\n            }\n          })\n          .map(todo => {\n            return (\n              <CSSTransition\n                key={todo.id}\n                timeout={300}\n                classNames=\"item\"\n              >\n                <TodoInfo\n                  todo={todo}\n                  key={todo.id}\n                  todoIdsOnLoad={todoIdsOnLoad}\n                  onTodoDelete={onTodoDelete}\n                  onTodoComplete={onTodoComplete}\n                  saveInputChange={saveInputChange}\n                />\n              </CSSTransition>\n            );\n          })}\n\n        {todoOnLoad && (\n          <CSSTransition\n            key={0}\n            timeout={300}\n            classNames=\"temp-item\"\n          >\n            <TodoInfo\n              todo={todoOnLoad}\n              todoIdsOnLoad={todoIdsOnLoad}\n              onTodoDelete={onTodoDelete}\n              onTodoComplete={onTodoComplete}\n              saveInputChange={saveInputChange}\n            />\n          </CSSTransition>\n        )}\n      </TransitionGroup>\n    </section>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\nimport { AuthProvider } from './components/Auth/AuthContext';\n\nconst Root = () => (\n  <AuthProvider>\n    <App />\n  </AuthProvider>\n);\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}